(defpackage cl4l-slist-tests
  (:import-from cl4l-test define-test run-tests)
  (:use cl cl4l-slist))

(in-package cl4l-slist-tests)

(define-test (:slist :match)
  (let* ((x (slist nil 1 2 3 4 5))
         (y (slist nil 3 5 6))
         (m1 (slist-match x y))
         (m2 (slist-match x y m1))
         (m3 (slist-match x y m2)))
    (assert (= 3 (second (first m1))))
    (assert (= 5 (second (first m2))))
    (assert (null m3))))

(define-test (:slist :diff)
  (let* ((x (slist nil 1 2 3 4 5))
	 (y (slist nil 1 3 5 6 7))
	 (xy (slist-clone x)))
    (slist-diff xy y)
    (assert (= 2 (slist-len xy)))))

(define-test (:slist :join)
  (let* ((x (slist nil 1 2 3 4 5 8))
	 (y (slist nil 1 3 5 6 7))
	 (xy (slist-clone x)))
    (slist-join xy y)
    (assert (= 3 (slist-len xy)))))

(defparameter len 1000)

(defun rnd-list ()
  (let ((lst))
    (dotimes (_ len)
      (push (random (* len 100)) lst))
    lst))

(defparameter x nil)
(defparameter y nil)
(defparameter xs nil)
(defparameter ys nil)

(defmethod run-tests :around (run &key)
  (let* ((x (rnd-list))
         (y (rnd-list))
         (xs (apply #'slist nil x))
         (ys (apply #'slist nil y)))
    (call-next-method)))

(define-test (:slist :perf)
  (let ((join (slist-clone xs)) 
        (diffxy (slist-clone xs))
        (diffyx (slist-clone ys)))
    (slist-join join ys)
    (slist-diff diffxy ys)
    (slist-diff diffyx xs)))

(define-test (:slist :perf :built-in)
  (let ((join (copy-list x))
        (diffxy (copy-list x))
        (diffyx (copy-list y)))
    (setf join (nintersection join y :test #'=))
    (setf diffxy (nset-difference diffxy y :test #'=))
    (setf diffyx (nset-difference diffyx x :test #'=))))
